{"version":3,"sources":["rr.png","Components/header.js","Components/footer.js","Components/Router.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","to","src","RR","onClick","props","history","push","React","Component","Footer","AppRouter","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,gC,8NCoC5BC,E,uKA/BN,IAAD,OAQJ,OACI,yBAAKC,UAAU,UAGhB,wBAAIA,UAAU,UAAd,UACA,kBAAC,IAAD,CAAMC,GAAG,WAAT,mBAEA,6BAAK,6BACL,yBAAKC,IAAKC,MACT,6BAAK,6BAGN,wBAAIH,UAAU,UAAd,iBACA,4BAAQI,QAlBD,WACd,EAAKC,MAAMC,QAAQC,KAAK,YAiBSP,UAAU,mBAApC,8B,GAtBcQ,IAAMC,WC8BZC,E,uKA5BN,IAAD,OAQJ,OACG,yBAAKV,UAAU,UAGf,wBAAIA,UAAU,UAAd,UACA,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,eAAvB,oBAEC,6BAND,IAMO,6BACN,yBAAKE,IAAKC,MACV,6BAAK,6BAGN,wBAAIH,UAAU,UAAd,SACA,4BAAQI,QAlBE,WACb,EAAKC,MAAMC,QAAQC,KAAK,MAiBIP,UAAU,kBAAnC,8B,GAtBcQ,IAAMC,WCkBZE,E,uKAdX,OACI,kBAAC,IAAD,KAII,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWf,IACjC,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,UAAUC,UAAWJ,S,GAT3BF,IAAMC,WCWfM,G,6KATb,OACE,6BACG,kBAAC,EAAD,W,GALWP,IAAMC,YCOJO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.474c8946.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rr.b17f2b04.png\";","import React from 'react';\r\n// React Link\r\nimport {Link } from \"react-router-dom\";\r\nimport RR from '../rr.png'\r\nclass Header extends React.Component{\r\nrender(){\r\n\r\n    // By Using JS\r\n let footer = () => {\r\nthis.props.history.push('/footer')\r\n}\r\n\r\n\r\n    return (\r\n        <div className=\"center\">\r\n\r\n        {/*Normal  */}\r\n       <h1 className=\"header\">Header</h1>\r\n       <Link to=\"/footer\"> Link to Footer</Link>  \r\n\r\n       <br/><br/>\r\n       <img src={RR} />\r\n        <br/><br/>\r\n\r\n        {/* By Using JS */}\r\n       <h1 className=\"header\">By JavaScript</h1>\r\n       <button onClick={footer}  className=\"btn btn-primary\"> Link to Footer By JS</button>  \r\n\r\n      \r\n\r\n       </div>\r\n    )\r\n\r\n}\r\n}\r\n\r\nexport default Header;\r\n\r\n\r\n","import React from 'react';\r\n// React Link\r\nimport {Link } from \"react-router-dom\";\r\nimport RR from '../rr.png'\r\n\r\nclass Footer extends React.Component{\r\nrender(){\r\n\r\n    // By Using JS \r\n    let header = () => {\r\n    this.props.history.push('/')\r\n    }\r\n    \r\n    \r\n    return ( \r\n       <div className=\"center\">\r\n       \r\n        {/*Normal  */}\r\n       <h1 className=\"footer\">Footer</h1> \r\n       <Link to=\"/\" className=\"text-danger\"> Link to Header </Link>\r\n        \r\n        <br/> <br/>\r\n        <img src={RR} />\r\n        <br/><br/>\r\n\r\n       {/* By Using JS */}\r\n       <h1 className=\"footer\">By JS</h1>\r\n       <button onClick={header} className=\"btn btn-danger\"> Link to Header By JS</button>\r\n\r\n    \r\n       </div>\r\n    )\r\n}}\r\n\r\nexport default Footer;","import React from 'react';\r\n// React Router and Route\r\nimport { BrowserRouter as Router,  Route} from \"react-router-dom\";\r\nimport Header from './header';\r\nimport Footer from './footer';\r\n\r\nclass AppRouter extends React.Component{\r\nrender(){\r\n    \r\n    return (\r\n        <Router>\r\n                \r\n            {/* Now this Router will become main part of whole project  */}\r\n            \r\n            <Route exact path=\"/\" component={Header} />\r\n            <Route exact path=\"/footer\" component={Footer} />\r\n\r\n        </Router>\r\n    )\r\n\r\n}\r\n}\r\n\r\nexport default AppRouter;","import React from 'react';\nimport AppRouter from './Components/Router';\nimport './App.css';\nimport './rr.png'\n\nclass App extends React.Component {\n  render(){\n\n  return (\n    <div>\n       <AppRouter/>\n    </div>\n  )\n\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}